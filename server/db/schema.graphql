type Client {
        id: ID
        name: String
        lastname: String
        company: String
        age: Int
        type: TypeClient
        orders: [Order]
        emails: [Email]
    }

    type Product { 
        id: ID
        name: String
        price: Int 
        stock: Int
    }

    type Email {
        email: String
    }


    """ What type of client you have """
    enum TypeClient { 
        BASIC
        PREMIUM
    }
    
    type Order {
        id: ID
        order: [OrderProduct]
        total: Float
        date: String 
        client: ID 
        status: OrderStatus
    }

    type OrderProduct {
        id: ID 
        quantity: Int
    }

    type Token {
        token: String!
    }

    enum OrderStatus {
        PENDING
        COMPLETED
        CANCELLED 
    }

    type TopClientTotal {
        total: Float
        client: [Client]
    }

    type TopSellerTotal {
        total: Float
        seller: [User]
    }

    type User {
        id: ID
        name: String
        rol: String
        user: String
    }

    
    type Query {
        # Clients
        getClients(limit: Int, offset: Int, seller: String): [Client]
        getClient(id: ID): Client
        totalClients(seller: String): String
        totalProducts: String
        # Products 
        getProducts(limit: Int, offset: Int, stock: Boolean): [Product]
        getProduct(id: ID): Product
        # Get Orders 
        getOrders(client: String): [Order]
        #Charts
        topClients: [TopClientTotal]
        topSellers: [TopSellerTotal]
        #Users
        getUser: User
    }


    """ Camp for new clients  """
    input ClientInput {
        id: ID
        name: String!
        lastname: String!
        company: String!
        age: Int!
        type: TypeClient
        orders: [OrderInput]
        emails: [EmailInput] 
        seller: ID
    }

    input ProductInput {
        id: ID
        name: String!
        price: Int!
        stock: Int!
    }

    input OrderInput {
        id: ID
        order: [OrderProductInput]
        total: Float
        date: String 
        client: ID 
        status: OrderStatus
        seller: ID
    }

    input OrderProductInput {
        id: ID 
        quantity: Int
    }

    input EmailInput {
        email: String
    }

    """ Create new clients """
    type Mutation { 
        # Name of resolver, Input and Return value 
        """ Allow you to create a new client """
        #Products 
        createProduct(input: ProductInput): Product
        updateProduct(input: ProductInput) : Product 
        deleteProduct(id: ID! ) : String 
        #Clients 
        createClient(input: ClientInput) : Client 
        updateClient(input: ClientInput) : Client 
        deleteClient(id: ID! ) : String 
        # Orders 
        createOrder(input: OrderInput): Order
        updateStatus(input: OrderInput): String
        # Users
        createUser(user: String!, password: String!, name: String!, rol: String!) : String
        authUser(user: String!, password: String!) : Token
    }