type Client {
        id: ID
        name: String
        lastname: String
        company: String
        age: Int
        type: TypeClient
        orders: [Order]
        emails: [Email]
    }

    type Product { 
        id: ID
        name: String
        price: Int 
        stock: Int
    }

    type Email {
        email: String
    }

    type Order { 
        product: String!
        price: Int
    }

    """ What type of client you have """
    enum TypeClient { 
        BASIC
        PREMIUM
    }

    
    type Query {
        # Clients
        getClients(limit: Int, offset: Int): [Client]
        getClient(id: ID): Client
        totalClients: String
        totalProducts: String
        # Products 
        getProducts(limit: Int, offset: Int): [Product]
        getProduct(id: ID): Product
    }


    """ Camp for new clients  """
    input ClientInput {
        id: ID
        name: String!
        lastname: String!
        company: String!
        age: Int!
        type: TypeClient
        orders: [OrderInput]
        emails: [EmailInput] 
    }

    input ProductInput {
        id: ID
        name: String!
        price: Int!
        stock: Int!
    }

    input OrderInput {
        product: String
        price: Int
    }

    input EmailInput {
        email: String
    }

    """ Create new clients """
    type Mutation { 
        # Name of resolver, Input and Return value 
        """ Allow you to create a new client """
        #Products 
        createProduct(input: ProductInput): Product
        updateProduct(input: ProductInput) : Product 
        deleteProduct(id: ID! ) : String 
        #Clients 
        createClient(input: ClientInput) : Client 
        updateClient(input: ClientInput) : Client 
        deleteClient(id: ID! ) : String 
    }